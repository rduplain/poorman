#!/bin/bash
# poorman: shell port of foreman process management using Procfile and .env.
#
# Copyright (c) 2013, Ron DuPlain
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Exit immediately if a command error or non-zero return occurs.
set -e
set -o pipefail

# Environment variables during poorman's run time.
declare POORMAN            # filepath for this instance of poorman
declare POORMAN_NAME       # name of command as listed in Procfile
declare POORMAN_COMMAND    # command-line as listed in Procfile
declare POORMAN_PAD        # space-filled string to line up stdout logging
declare POORMAN_LOG_PREFIX # pre-computed log prefix
declare POORMAN_LOG_COLOR  # ANSI escape sequence for color of current log

declare POORMAN_PID        # PID of start poorman process from `poorman start`
declare POORMAN_LOGGER_PID # PID of logger poorman process in `poorman exec`
declare -a POORMAN_PIDS    # array of PIDs of poorman-spawned processes

# When this is not-empty, poorman will kill only poorman-spawned processes.
# This is specifically useful when poorman's caller is in the same process group.
export POORMAN_SELECTIVE_KILL=${POORMAN_SELECTIVE_KILL:-}

export PROGRAM=`basename $0`
export POORMAN=$0

# Program count, incremented by 1 on each exec. (Used in rotating colors.)
PROGRAM_COUNT=0

# Begin main functions.

main() {
    # User-facing entry point for poorman.

    if [ $# -eq 0 ]; then
        # No arguments given.
        usage
    fi

    local command=$1
    shift

    if [ "$command" = "start" ]; then
        export POORMAN_PID=$$
        trap_during_setup
        main_start "$@"
    elif [ "$command" = "exec" ]; then
        trap_during_setup
        main_exec "$@"
    elif [ "$command" = "source" ]; then
        pass
    else
        echo "error: no such command: $command" >&2
        echo >&2
        usage
    fi
}

trap_during_setup() {
    # Set trap intended for poorman during initialization.

    [[ -n "$POORMAN_SELECTIVE_KILL" ]] || trap 'clear_traps; kill 0' SIGINT SIGTERM EXIT
}

clear_traps() {
    # Call all traps known to be set by poorman.

    trap - SIGINT SIGTERM EXIT
}

main_start() {
    # Load Procfile & execute each command found, after pruning out comments.

    if [ ! -e Procfile ]; then
        echo "error: Procfile does not exist" >&2
        echo >&2
        usage
    fi

    # Load environment from .env file.
    if [ -e .env ]; then
        eval "`map_lines echo_env_export < .env`"
    fi

    # Load the Procfile, parse it, and execute the commands found there.
    build_logging_pad
    map_lines exec_procfile_line < Procfile

    # Clean up environment in case anything wants to use it.
    export POORMAN_NAME=$PROGRAM
    unset POORMAN_COMMAND

    # Set trap in a single line to simplify coverage.
    [[ -n "$POORMAN_SELECTIVE_KILL" ]] && trap 'clear_traps; kill ${POORMAN_PIDS[@]} >/dev/null 2>&1' SIGINT SIGTERM EXIT || trap 'clear_traps; kill 0' SIGINT SIGTERM EXIT

    wait
}

main_exec() {
    # Load .env & execute given command, logging each line w/metadata prefix.

    # Expand any shell parameters in the Procfile command.
    local command_line=`eval echo "$@"`
    # Disable pathname expansion to avoid glob expansion in logs.
    set -f
    # Compute the logging prefix to line up stdout among processes.
    local pad_length=${#POORMAN_PAD}
    local name_length=${#POORMAN_NAME}
    let filler_length=pad_length-name_length+1
    local log_prefix="$POORMAN_NAME${POORMAN_PAD:0:$filler_length}|"
    # Execute the command, logging each line with timestamp & program name.
    export POORMAN_LOG_PREFIX="$log_prefix"
    exec $command_line 2>&1 | map_lines log_line &
    export POORMAN_LOGGER_PID=$!

    # Set trap in a single line to simplify coverage.
    export NEXT_OF_KIN="$POORMAN_PID $POORMAN_LOGGER_PID"
    [[ -n "$POORMAN_SELECTIVE_KILL" ]] && trap 'clear_traps; kill $NEXT_OF_KIN >/dev/null 2>&1' SIGINT SIGTERM EXIT || trap 'clear_traps; kill 0' SIGINT SIGTERM EXIT

    wait
}

add_pid() {
    # Add given pid to POORMAN_PIDS, should only be called from main process.

    local pid=$1
    shift

    local index=${#POORMAN_PIDS[@]}
    POORMAN_PIDS[$index]=$pid
}

# Begin per-line utilities, called with each line of file or output.

log_line() {
    # Log given line to stdout, prefixed with timestamp & program name.

    colored="$POORMAN_LOG_COLOR`date +"%H:%M:%S"` $POORMAN_LOG_PREFIX\033[0m"
    # Evaluate THESE backslashes, but not THOSE backslashes.
    echo -e "$colored" "${*//\\/\\\\}"
}

echo_env_export() {
    # Print eval-able line, intended for use with .env lines.

    if [[ "$@" == *=* ]]; then
        echo "export ${@//\\/\\\\}"  # <---- Look, mountains!
    fi
}

exec_procfile_line() {
    # Parse & exec Procfile-style line, intended for use with Procfile lines.
    #
    # Calls poorman recursively to `exec` into command & support killing group.

    parse_procfile_line "$@"
    if [ -z "$POORMAN_COMMAND" ]; then
        return
    fi
    export POORMAN_LOG_COLOR=`pick_color $PROGRAM_COUNT`
    let PROGRAM_COUNT=PROGRAM_COUNT+1
    $POORMAN exec "$POORMAN_COMMAND" 2>/dev/null &
    add_pid $!
}

echo_procfile_name() {
    # Parse Procfile-style line, print name of program entry.

    parse_procfile_line "$@"
    if [ -z "$POORMAN_NAME" ]; then
        return
    fi
    echo $POORMAN_NAME
}

parse_procfile_line() {
    # Parse Procfile-style line into $POORMAN_NAME & $POORMAN_COMMAND.

    local line="$@"
    line=${line%%\#*} # Strip out comments.
    if [ -z "$line" ]; then
        # Line is empty. Ensure values are unset for caller inspection.
        unset POORMAN_NAME POORMAN_COMMAND
        return
    fi
    export POORMAN_NAME=${line%%:*}    # everything up to first ':'
    export POORMAN_COMMAND=${line#*: } # everything after first ':'
}

# Begin map utility to process lines in text using manageable functions.

map_lines() {
    # Execute <first_argument> for each line in stdin.
    #
    # map_lines function forked from the nixd project.

    # Understanding the internal field separator (IFS) in bash:
    #
    # The IFS is used in word splitting. To split across lines in a string, a
    # for-loop can simply iterate across that string with IFS set to the
    # newline character. IFS must be restored to support normal operation of
    # any further commands.

    local line_function=$1
    shift

    local OLD_IFS="$IFS"
    local NEW_IFS=$'\n' # Specifying ANSI escaped char requires $'string' form.

    IFS="$NEW_IFS"
    local count=0
    while read -r line; do
        IFS="$OLD_IFS"
        $line_function "$line"
        local result=$?
        IFS="$NEW_IFS"
        if [ $result -ne 0 ]; then
            # Ensure errors do not get swallowed in this loop.
            return $result
        fi
    done
    IFS="$OLD_IFS"
}

pass() {
    # No operation.

    :
}

# Begin top-level program utilities.

build_logging_pad() {
    # Inspect all Procfile names & set POORMAN_PAD accordingly.

    unset POORMAN_PAD

    # Find the maximum length name in the Procfile.
    local length=0
    for name in `map_lines echo_procfile_name < Procfile`; do
        if [ ${#name} -gt $length ]; then
            length=${#name}
        fi
    done

    # Space-fill the pad using that length.
    POORMAN_PAD=""
    while [ ${#POORMAN_PAD} -lt $length ]; do
        POORMAN_PAD="$POORMAN_PAD "
    done
    export POORMAN_PAD
}

pick_color() {
    # Pick a color from a preset given an integer, echo ANSI escape sequence.

    if [ $# -eq 0 ]; then
        return
    fi

    local number=$1
    shift

    local cyan='\033[36m'
    local magenta='\033[35m'
    local red='\033[31m'
    local green='\033[32m'
    local yellow='\033[33m'

    local colors=( $cyan $magenta $red $green $yellow )
    let index=$number%5
    echo ${colors[$index]}
}

usage() {
    # Print poorman program usage to stderr & return 2.

    clear_traps

    echo "usage: $PROGRAM start" >&2
    echo >&2
    echo "$PROGRAM is a shell port of foreman, and" >&2
    echo "reads Procfile and .env in the current working directory." >&2
    return 2
}

main "$@"
